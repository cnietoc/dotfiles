#!/usr/bin/env bash

set -euo pipefail

source "$DOTLY_PATH/scripts/core/_main.sh"

##? Sync playlists from Spotify on OneDrive
#?? 1.0.0
##?
##? Usage:
##?   sync_playlists
##?   sync_playlists -d
##?
##? Options:
##?   -d --default   Uses default client id and secret
docs::parse "$@"

declare -A extra_playlists=(
    #["La Mazdalista"]="https://open.spotify.com/playlist/2sDXWUw7DYIATBu8wIlkOB?si=9178b8524de64394"
)

spotify_sync_folder="$ONE_DRIVE_PERSONAL/Música/Spotify"

echo "Incrementando el límite de archivos abiertos..."
ulimit -S -n 2048

# If spotdl is not installed, install it
if ! command -v spotdl &> /dev/null; then
  echo "spotdl is not installed. Installing it..."
  pipx install spotdl
fi

# Spotdl requires a Spotify API key to work
if [ -z "$SPOTIFY_CLIENT_ID" ] || [ -z "$SPOTIFY_CLIENT_SECRET" ]; then
  echo "SPOTIFY_CLIENT_ID and SPOTIFY_CLIENT_SECRET must be set in your environment variables"
  exit 1
fi

REDIRECT_URI="http://localhost:8888/callback"
AUTH_URL="https://accounts.spotify.com/authorize"
TOKEN_URL="https://accounts.spotify.com/api/token"
API_URL="https://api.spotify.com/v1"
SCOPES="playlist-read-private&playlist-read-collaborative"
PORT=8888

TOKEN_FILE="$HOME/.spotify_token.json"

# Paso 1: Iniciar el servidor local y capturar el authorization_code
function get_authorization_code() {
  echo "Abre el siguiente enlace en tu navegador para autorizar la aplicación:"
  echo "$AUTH_URL?client_id=$SPOTIFY_CLIENT_ID&response_type=code&redirect_uri=$REDIRECT_URI&scope=$(echo $SCOPES | tr ' ' '%20')"
  echo

  echo "Esperando el código de autorización en http://localhost:$PORT/callback..."

  # Usamos Python para capturar el código de autorización
  AUTHORIZATION_CODE=$(python3 - <<EOF
import http.server
import socketserver
import urllib.parse

class Handler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        query = urllib.parse.urlparse(self.path).query
        params = urllib.parse.parse_qs(query)
        if 'code' in params:
            print(params['code'][0])
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Cierra esta ventana y vuelve a la terminal.")

PORT = $PORT
with socketserver.TCPServer(("", PORT), Handler) as httpd:
    httpd.handle_request()
EOF
)
  echo "Código de autorización recibido: $AUTHORIZATION_CODE"
}

# Paso 2: Intercambiar el código por tokens
function exchange_code_for_tokens() {
  RESPONSE=$(curl -s -X POST "$TOKEN_URL" \
    -H "Authorization: Basic $(echo -n "$SPOTIFY_CLIENT_ID:$SPOTIFY_CLIENT_SECRET" | base64)" \
    -d grant_type=authorization_code \
    -d content_type=application/x-www-form-urlencoded \
    -d code="$AUTHORIZATION_CODE" \
    -d redirect_uri="$REDIRECT_URI")
  echo "------ Response: $RESPONSE"
  echo "$RESPONSE" | jq '. + {expires_at: (now + .expires_in | floor)}' > "$TOKEN_FILE"
}

# Paso 3: Refrescar el token
function refresh_access_token() {
  REFRESH_TOKEN=$(jq -r '.refresh_token' < "$TOKEN_FILE")
  # Si el token de actualización no está presente, se debe obtener un nuevo token
  if [[ -z "$REFRESH_TOKEN" || "$REFRESH_TOKEN" == "null" ]]; then
    echo "El token de actualización no está disponible. Por favor, vuelve a autorizar la aplicación."
    get_authorization_code
    exchange_code_for_tokens
    return
  fi
  RESPONSE=$(curl -s -X POST "$TOKEN_URL" \
    -H "Authorization: Basic $(echo -n "$SPOTIFY_CLIENT_ID:$SPOTIFY_CLIENT_SECRET" | base64)" \
    -d grant_type=refresh_token \
    -d refresh_token="$REFRESH_TOKEN")
  echo "$RESPONSE" | jq '. + {expires_at: (now + .expires_in | floor)}' > "$TOKEN_FILE"
}

function is_token_expired() {
  if [[ ! -f "$TOKEN_FILE" ]]; then
    return 0
  fi

  EXPIRES_AT=$(jq -r '.expires_at' < "$TOKEN_FILE" | cut -d '.' -f 1)  # Eliminar parte decimal
  CURRENT_TIME=$(date +%s)

  if [[ $CURRENT_TIME -ge $EXPIRES_AT ]]; then
    return 0  # Token ha caducado
  fi

  return 1  # Token sigue válido
}

# Paso 5: Hacer una solicitud a la API
function call_api() {
  if is_token_expired; then
    echo "Token expirado, refrescando..."
    refresh_access_token
  fi

  ACCESS_TOKEN=$(jq -r '.access_token' < "$TOKEN_FILE")

  # Solicitud a la API
  ENDPOINT=$1
  curl -s -X GET "$API_URL/$ENDPOINT" \
    -H "Authorization: Bearer $ACCESS_TOKEN"
}

# Proceso principal
if [[ ! -f "$TOKEN_FILE" ]]; then
  get_authorization_code
  exchange_code_for_tokens
fi

if ! $default; then
  client_params="--client-id $SPOTIFY_CLIENT_ID --client-secret $SPOTIFY_CLIENT_SECRET"
else
  echo "Using default client id and secret"
  client_params=""
fi

rm -rf ~/.spotdl

echo "Obteniendo cookies de Brave para Spotdl..."
yt-dlp --cookies-from-browser brave --cookies ~/.spotdl/braveCookies > /dev/null 2>&1 || true

if [ ! -d "$spotify_sync_folder/.spotdl" ]; then
  mkdir -p "$spotify_sync_folder/.spotdl"
fi

if is_token_expired; then
  echo "Token expirado, refrescando..."
  refresh_access_token
fi

ACCESS_TOKEN=$(jq -r '.access_token' < "$TOKEN_FILE")

offset=0
limit=20
all_playlists=""

# Hacer la solicitud inicial
while : ; do
  # Realiza la solicitud GET con el offset

  playlist_response=$(curl -s -X "GET" "https://api.spotify.com/v1/me/playlists?offset=$offset&limit=$limit" -H "Authorization: Bearer $ACCESS_TOKEN")

  # Extrae el nombre y URL de cada playlist
  playlist_selection=$(echo "$playlist_response" | jq -r '.items[] | "\(.name) \(.external_urls.spotify)"')

  # Agrega la selección a la variable all_playlists
  all_playlists+="$playlist_selection"$'\n'

  # Verifica si hay más páginas
  next_url=$(echo "$playlist_response" | jq -r '.next')
  if [ "$next_url" == "null" ]; then
      break
  fi

  # Incrementa el offset para la siguiente solicitud
  offset=$((offset + limit))
done

# Agrega las playlists extra
for playlist in "${!extra_playlists[@]}"; do
  all_playlists+="$playlist ${extra_playlists[$playlist]}"$'\n'
done

selected_playlists=$(echo "$all_playlists" | fzf --multi --prompt="Selecciona playlists: " --header="Usa TAB para seleccionar, ENTER para confirmar")

if [[ -z "$selected_playlists" ]]; then
    echo "No se ha seleccionado ninguna playlist"
    exit 0
fi

echo "Sincronizando las playlists:"
playlists_size=$(echo "$selected_playlists" | wc -l | xargs)
echo "$selected_playlists" | while read -r playlist; do
  name=$(echo "$playlist" | sed 's/ \S*$//')
  echo "- $name"
done

count=0
echo "$selected_playlists" | while read -r playlist; do

  if is_token_expired; then
    echo "Token expirado, refrescando..."
    refresh_access_token
  fi

  ACCESS_TOKEN=$(jq -r '.access_token' < "$TOKEN_FILE")

  count=$((count+1))

  playlist_url=$(echo "$playlist" | awk '{print $NF}')
  playlist_id=$(echo "$playlist" | awk -F[/:] '{print $6}')

  response=$(curl -s -X GET "https://api.spotify.com/v1/playlists/$playlist_id" \
        -H "Authorization: Bearer $ACCESS_TOKEN")

  playlist_name=$(echo "$response" | jq -r '.name')
  playlist_author=$(echo "$response" | jq -r '.owner.display_name')

  playlist_info=$(echo "$playlist_name ($playlist_author)" | tr -d '[:cntrl:]\/:*?"<>|' | sed 's/  */ /g' | sed 's/^[ \t]*//;s/[ \t]*$//')

  echo "Syncing $playlist_info ($count / $playlists_size) playlist into $spotify_sync_folder"

  if [ ! -d "$spotify_sync_folder/$playlist_info" ]; then
    mkdir -p "$spotify_sync_folder/$playlist_info"
  fi

  if [ ! -f "$spotify_sync_folder/.spotdl/$playlist_info.spotdl" ]; then
    sync_command="--save-file '../.spotdl/$playlist_info.spotdl' sync $playlist_url"
  else
    sync_command="sync '../.spotdl/$playlist_info.spotdl'"
  fi

  # if [ ! -f "$spotify_sync_folder/.spotdl/$playlist_info.spotdl" ]; then
  #  (cd "$spotify_sync_folder" && spotdl --user-auth $client_params --max-retries 25 --print-errors --m3u "$playlist_info.m3u8" --save-file ".spotdl/$playlist_info.spotdl" --output "$playlist_info/{artists} - {title}.{output-ext}" sync "$playlist_url")
  # else
  #  (cd "$spotify_sync_folder" && spotdl --user-auth $client_params --max-retries 25 --print-errors --m3u "$playlist_info.m3u8" --output "$playlist_info/{artists} - {title}.{output-ext}" sync ".spotdl/$playlist_info.spotdl")
  # fi
  #  (cd "$spotify_sync_folder" && spotdl --overwrite metadata --print-errors --m3u "$playlist_info.m3u8" --save-file ".spotdl/$playlist_info.spotdl" --output "$playlist_info/{artists} - {title}.{output-ext}" sync "$playlist_url")
  # --client-id "$SPOTIFY_CLIENT_ID" --client-secret "$SPOTIFY_CLIENT_SECRET"
  ###command_to_execute="spotdl --overwrite metadata --scan-for-songs --user-auth $client_params --max-retries 25 --print-errors --m3u \"$playlist_info.m3u\" --cookie-file '~/.spotdl/braveCookies' --restrict strict --bitrate auto $sync_command"
  command_to_execute="spotdl --overwrite metadata --scan-for-songs --auth-token $ACCESS_TOKEN --max-retries 100 --print-errors --m3u \"$playlist_info.m3u\" --cookie-file '~/.spotdl/braveCookies' --restrict strict --force-update-metadata --bitrate 128k $sync_command"

  # echo "$command_to_execute"
  (cd "$spotify_sync_folder/$playlist_info" && sh -c "$command_to_execute")
done
